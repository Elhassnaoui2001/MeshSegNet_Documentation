{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. You can write code in a file index.md in MkDocs by using the fenced code block syntax. The fenced code block syntax starts with three or more backticks () and ends with the same number of backticks. For example, the following code would write a Python code block in a fileindex.md`: Python def factorial(n): \"\"\" Calculate the factorial of a number. Args: n: The number to calculate the factorial of. Returns: The factorial of the number. \"\"\" if n == 0: return 1 else: return n * factorial(n - 1) Use code with caution. Learn more The fenced code block syntax can be used to write code in any programming language. You can also specify the language of the code block by adding a language identifier after the first set of backticks. For example, the following code would write a Python code block in a file index.md and specify that the language of the code block is Python: def factorial(n): \"\"\" Calculate the factorial of a number. Args: n: The number to calculate the factorial of. Returns: The factorial of the number. \"\"\" if n == 0: return 1 else: return n * factorial(n - 1)","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. You can write code in a file index.md in MkDocs by using the fenced code block syntax. The fenced code block syntax starts with three or more backticks () and ends with the same number of backticks. For example, the following code would write a Python code block in a fileindex.md`: Python def factorial(n): \"\"\" Calculate the factorial of a number. Args: n: The number to calculate the factorial of. Returns: The factorial of the number. \"\"\" if n == 0: return 1 else: return n * factorial(n - 1) Use code with caution. Learn more The fenced code block syntax can be used to write code in any programming language. You can also specify the language of the code block by adding a language identifier after the first set of backticks. For example, the following code would write a Python code block in a file index.md and specify that the language of the code block is Python: def factorial(n): \"\"\" Calculate the factorial of a number. Args: n: The number to calculate the factorial of. Returns: The factorial of the number. \"\"\" if n == 0: return 1 else: return n * factorial(n - 1)","title":"Project layout"},{"location":"Deployment/","text":"Welcome to Our documentation for Deployment Fonctionnalit\u00e9s du Projet La partie de d\u00e9ploiement de notre projet est une \u00e9tape cruciale pour r\u00e9aliser des pr\u00e9dictions sur des objets 3D au format .vtp ou .obj et les visualiser dans notre site web. Cette phase est le pivot central de notre syst\u00e8me, permettant aux utilisateurs de tirer pleinement parti de la technologie 3D pour une exp\u00e9rience enrichissante. Notre objectif principal est d'offrir aux utilisateurs la capacit\u00e9 de t\u00e9l\u00e9charger des fichiers 3D, de les soumettre \u00e0 un processus de pr\u00e9diction, puis de visualiser les r\u00e9sultats de mani\u00e8re interactive sur notre site web. Pour atteindre cet objectif, nous avons mis en place une architecture en deux parties : le backend et le frontend. La partie backend : assure le traitement des donn\u00e9es, y compris la pr\u00e9diction \u00e0 l'aide du mod\u00e8le MeshSegNet. la partie frontend :offre une interface conviviale pour les utilisateurs Technologies Utilis\u00e9es Configuration et Installation 1. Configuration de l'environnement virtuel Un environnement virtuel est un environnement Python isol\u00e9 qui permet de g\u00e9rer les d\u00e9pendances sp\u00e9cifiques \u00e0 un projet sans interf\u00e9rer avec d'autres projets Python sur le m\u00eame syst\u00e8me. Voici comment cr\u00e9er et configurer un environnement virtuel pour votre projet: -Installation de l'outil virtualenv : Si vous n'avez pas d\u00e9j\u00e0 virtualenv install\u00e9 sur votre syst\u00e8me, vous pouvez l'installer en utilisant pip, qui est l'outil de gestion de paquets Python. Ouvrez un terminal et ex\u00e9cutez la commande suivante : pip install virtualenv -Cr\u00e9ation de l'environnement virtuel: Dans le r\u00e9pertoire racine de votre projet, cr\u00e9ez un environnement virtuel en utilisant virtualenv. Remplacez nom_env par le nom que vous souhaitez donner \u00e0 votre environnement virtuel : virtualenv nom_env. Cela cr\u00e9era un dossier avec le nom de votre environnement virtuel contenant une installation Python propre et isol\u00e9e -Activation de l'environnement virtuel: Apr\u00e8s avoir cr\u00e9\u00e9 l'environnement virtuel, vous devez l'activer. Selon votre syst\u00e8me d'exploitation, la commande d'activation varie. Sur Windows: nom_env\\Scripts\\activate. Sur macOS ou Linux: source nom_env/bin/activate 2. Installation Backend -Installation de Flask: Dans l'environnement virtuel activ\u00e9 avant, utiliser lacommande suivante pour installer flask: pip install flask -Installation des d\u00e9pendances Python: Utilisez pip pour installer les packages Python n\u00e9cessaires. Dans ce contexte, vous aurez probablement besoin de packages tels que Flask , NumPy , Torch , vedo , Pandas , Spicy ... Exemple: pip install flask numpy torch . Pour lancer le serveur Backend, il faut acc\u00e9der au dossier de backend, et puis ex\u00e9cuter la commande python app.py 3. Installation Frontend - Installation de Node.js et npm Premi\u00e8rement, il faut t\u00e9l\u00e9charger le fichier Windows Installer(.msi) ou macOS Installer(.pkg), puis terminer le processus d' installation et la lancer. Pour lancer le serveur Frontend, il faut acc\u00e9der au dossier de fronted et ex\u00e9cuter la commande npm start . Frontend Structure du Frontend Interface Utilisateur Backend Structure du Backend API pour la Pr\u00e9diction Visualisation 3D avec VTK.js","title":"Deployment"},{"location":"Deployment/#welcome-to-our-documentation-for-deployment","text":"","title":"Welcome to Our documentation for Deployment"},{"location":"Deployment/#fonctionnalites-du-projet","text":"La partie de d\u00e9ploiement de notre projet est une \u00e9tape cruciale pour r\u00e9aliser des pr\u00e9dictions sur des objets 3D au format .vtp ou .obj et les visualiser dans notre site web. Cette phase est le pivot central de notre syst\u00e8me, permettant aux utilisateurs de tirer pleinement parti de la technologie 3D pour une exp\u00e9rience enrichissante. Notre objectif principal est d'offrir aux utilisateurs la capacit\u00e9 de t\u00e9l\u00e9charger des fichiers 3D, de les soumettre \u00e0 un processus de pr\u00e9diction, puis de visualiser les r\u00e9sultats de mani\u00e8re interactive sur notre site web. Pour atteindre cet objectif, nous avons mis en place une architecture en deux parties : le backend et le frontend. La partie backend : assure le traitement des donn\u00e9es, y compris la pr\u00e9diction \u00e0 l'aide du mod\u00e8le MeshSegNet. la partie frontend :offre une interface conviviale pour les utilisateurs","title":"Fonctionnalit\u00e9s du Projet"},{"location":"Deployment/#technologies-utilisees","text":"","title":"Technologies Utilis\u00e9es"},{"location":"Deployment/#configuration-et-installation","text":"","title":"Configuration et Installation"},{"location":"Deployment/#1-configuration-de-lenvironnement-virtuel","text":"Un environnement virtuel est un environnement Python isol\u00e9 qui permet de g\u00e9rer les d\u00e9pendances sp\u00e9cifiques \u00e0 un projet sans interf\u00e9rer avec d'autres projets Python sur le m\u00eame syst\u00e8me. Voici comment cr\u00e9er et configurer un environnement virtuel pour votre projet:","title":"1. Configuration de l'environnement virtuel"},{"location":"Deployment/#-installation-de-loutil-virtualenv","text":"Si vous n'avez pas d\u00e9j\u00e0 virtualenv install\u00e9 sur votre syst\u00e8me, vous pouvez l'installer en utilisant pip, qui est l'outil de gestion de paquets Python. Ouvrez un terminal et ex\u00e9cutez la commande suivante : pip install virtualenv","title":"-Installation de l'outil  virtualenv:"},{"location":"Deployment/#-creation-de-lenvironnement-virtuel","text":"Dans le r\u00e9pertoire racine de votre projet, cr\u00e9ez un environnement virtuel en utilisant virtualenv. Remplacez nom_env par le nom que vous souhaitez donner \u00e0 votre environnement virtuel : virtualenv nom_env. Cela cr\u00e9era un dossier avec le nom de votre environnement virtuel contenant une installation Python propre et isol\u00e9e","title":"-Cr\u00e9ation de l'environnement virtuel:"},{"location":"Deployment/#-activation-de-lenvironnement-virtuel","text":"Apr\u00e8s avoir cr\u00e9\u00e9 l'environnement virtuel, vous devez l'activer. Selon votre syst\u00e8me d'exploitation, la commande d'activation varie. Sur Windows: nom_env\\Scripts\\activate. Sur macOS ou Linux: source nom_env/bin/activate","title":"-Activation de l'environnement virtuel:"},{"location":"Deployment/#2-installation-backend","text":"","title":"2. Installation Backend"},{"location":"Deployment/#-installation-de-flask","text":"Dans l'environnement virtuel activ\u00e9 avant, utiliser lacommande suivante pour installer flask: pip install flask","title":"-Installation de Flask:"},{"location":"Deployment/#-installation-des-dependances-python","text":"Utilisez pip pour installer les packages Python n\u00e9cessaires. Dans ce contexte, vous aurez probablement besoin de packages tels que Flask , NumPy , Torch , vedo , Pandas , Spicy ... Exemple: pip install flask numpy torch . Pour lancer le serveur Backend, il faut acc\u00e9der au dossier de backend, et puis ex\u00e9cuter la commande python app.py","title":"-Installation des d\u00e9pendances Python:"},{"location":"Deployment/#3-installation-frontend","text":"","title":"3. Installation Frontend"},{"location":"Deployment/#-installation-de-nodejs-et-npm","text":"Premi\u00e8rement, il faut t\u00e9l\u00e9charger le fichier Windows Installer(.msi) ou macOS Installer(.pkg), puis terminer le processus d' installation et la lancer. Pour lancer le serveur Frontend, il faut acc\u00e9der au dossier de fronted et ex\u00e9cuter la commande npm start .","title":"- Installation de Node.js et npm"},{"location":"Deployment/#frontend","text":"","title":"Frontend"},{"location":"Deployment/#structure-du-frontend","text":"","title":"Structure du Frontend"},{"location":"Deployment/#interface-utilisateur","text":"","title":"Interface Utilisateur"},{"location":"Deployment/#backend","text":"","title":"Backend"},{"location":"Deployment/#structure-du-backend","text":"","title":"Structure du Backend"},{"location":"Deployment/#api-pour-la-prediction","text":"","title":"API pour la Pr\u00e9diction"},{"location":"Deployment/#visualisation-3d-avec-vtkjs","text":"","title":"Visualisation 3D avec VTK.js"},{"location":"FAQ/","text":"FAQ probl\u00e8mes-solutions","title":"FAQ probl\u00e8mes-solutions"},{"location":"FAQ/#faq-problemes-solutions","text":"","title":"FAQ probl\u00e8mes-solutions"},{"location":"about/","text":"Meet Our Team John Doe John Doe is a key member of our team. He specializes in web development and has a passion for creating beautiful and functional websites. John has been with our company for five years and has contributed to many successful projects. LinkedIn: John Doe's LinkedIn Profile","title":"About"},{"location":"about/#meet-our-team","text":"","title":"Meet Our Team"},{"location":"about/#john-doe","text":"John Doe is a key member of our team. He specializes in web development and has a passion for creating beautiful and functional websites. John has been with our company for five years and has contributed to many successful projects. LinkedIn: John Doe's LinkedIn Profile","title":"John Doe"}]}